function inference(Œºx_A, all_Œºy_B, I, ùê≤_range)
    if I == 2 # for 2 set
        # 1th rule
        # IF (x‚Çô IS HIGH) OR (x‚Çô IS LOW)
        # THEN y‚Çô IS LOW
        Œºx_A‚ÇÅ = Œºx_A[1] # the input fuzzy set LOW
        Œºx_A‚ÇÇ = Œºx_A[2] # the input fuzzy set HIGH
        Œºx_A = map(max, Œºx_A‚ÇÅ, Œºx_A‚ÇÇ) # apply the 1th rule -> A = A‚ÇÅ ‚à® A‚ÇÇ (OR fuzzy operator)
        all_Œºy_B‚ÇÅ = all_Œºy_B[:,1] # the output fuzzy set LOW
        ŒºAtoB‚ÅΩ¬π‚Åæ = map(min, fill(Œºx_A, length(all_Œºy_B‚ÇÅ)), all_Œºy_B‚ÇÅ) # Modus Ponens

        # 2th rule
        # IF NOT((x‚Çô IS HIGH) OR (x‚Çô IS LOW))
        # THEN y‚Çô IS HIGH
        Œºx_AÃÑ = 1 - Œºx_A # apply the 2th rule -> A = ¬¨(A‚ÇÅ ‚à® A‚ÇÇ)
        all_Œºy_B‚ÇÇ = all_Œºy_B[:,2] # the output fuzzy set HIGH
        ŒºAtoB‚ÅΩ¬≤‚Åæ = map(min, fill(Œºx_AÃÑ, length(all_Œºy_B‚ÇÅ)), all_Œºy_B‚ÇÇ) # Modus Ponens

        # resulting output fuzzy set (aggregation)
        ŒºAtoB = map(max, ŒºAtoB‚ÅΩ¬π‚Åæ, ŒºAtoB‚ÅΩ¬≤‚Åæ)

        # centroid mass (defuzzification)
        yÃÇ‚Çô = sum(ŒºAtoB.*ùê≤_range)./sum(ŒºAtoB)

    else # for 3 set
        # 1th rule
        # IF x‚Çô IS MEDIUM
        # THEN y‚Çô IS HIGH
        Œºx_A‚ÇÇ = Œºx_A[2] # the input fuzzy set MEDIUM
        Œºy_B‚ÇÉ = all_Œºy_B[:,3] # the output fuzzy set HIGH
        ŒºAtoB‚ÅΩ¬π‚Åæ = map(min, fill(Œºx_A‚ÇÇ, length(Œºy_B‚ÇÉ)), Œºy_B‚ÇÉ) # Modus Ponens 
        
        # 2th rule
        # IF x‚Çô IS LOW
        # THEN y‚Çô IS MEDIUM
        Œºx_A‚ÇÅ = Œºx_A[1] # the input fuzzy set LOW
        Œºy_B‚ÇÇ = all_Œºy_B[:,2] # the output fuzzy set MEDIUM
        ŒºAtoB‚ÅΩ¬≤‚Åæ = map(min, fill(Œºx_A‚ÇÅ, length(Œºy_B‚ÇÇ)), Œºy_B‚ÇÇ) # Modus Ponens

        # 3th rule
        # IF x‚Çô IS HIGH
        # THEN y‚Çô IS LOW
        Œºx_A‚ÇÉ = Œºx_A[3] # the input fuzzy set LOW
        Œºy_B‚ÇÅ = all_Œºy_B[:,1] # the output fuzzy set MEDIUM
        ŒºAtoB‚ÅΩ¬≥‚Åæ = map(min, fill(Œºx_A‚ÇÉ, length(Œºy_B‚ÇÅ)), Œºy_B‚ÇÅ) # Modus Ponens

        # resulting output fuzzy set (aggregation)
        ŒºAtoB = map(max, ŒºAtoB‚ÅΩ¬π‚Åæ, ŒºAtoB‚ÅΩ¬≤‚Åæ, ŒºAtoB‚ÅΩ¬≥‚Åæ)

        # centroid mass (defuzzification)
        yÃÇ‚Çô = sum(ŒºAtoB.*ùê≤_range)./sum(ŒºAtoB)
    end

    return yÃÇ‚Çô
end